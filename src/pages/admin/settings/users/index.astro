---
import AdminLayout from '../../../../layouts/AdminLayout.astro';
import { db } from '@astrojs/db';
import { users } from '../../../../lib/auth';

const usersList = await db.query.users.findMany({
    orderBy: (users, { desc }) => [desc(users.createdAt)],
});
---

<AdminLayout title="User Management">
    <div class="users-header">
        <h1>User Management</h1>
        <button id="createUser" class="button primary">Create User</button>
    </div>

    <div class="users-grid">
        {usersList.map(user => (
            <div class="user-card">
                <div class="user-avatar">
                    {user.image ? (
                        <img src={user.image} alt={user.name} />
                    ) : (
                        <div class="avatar-placeholder">
                            {user.name?.[0]?.toUpperCase() || '?'}
                        </div>
                    )}
                </div>
                <div class="user-info">
                    <h3>{user.name}</h3>
                    <p class="user-email">{user.email}</p>
                    <div class="user-meta">
                        <span class="user-role">{user.role}</span>
                        {user.emailVerified && (
                            <span class="verified-badge">âœ“ Verified</span>
                        )}
                        {user.twoFactorEnabled && (
                            <span class="twofa-badge">2FA</span>
                        )}
                    </div>
                </div>
                <div class="user-actions">
                    <button class="edit-user" data-user-id={user.id}>
                        Edit
                    </button>
                    {user.id !== 'admin' && (
                        <button class="delete-user" data-user-id={user.id}>
                            Delete
                        </button>
                    )}
                </div>
            </div>
        ))}
    </div>
</AdminLayout>

<!-- Create/Edit User Modal -->
<div id="userModal" class="modal">
    <div class="modal-content">
        <h2 id="modalTitle">Create User</h2>
        <form id="userForm">
            <input type="hidden" id="userId" />
            
            <div class="form-group">
                <label for="name">Name</label>
                <input type="text" id="name" required />
            </div>

            <div class="form-group">
                <label for="email">Email</label>
                <input type="email" id="email" required />
            </div>

            <div class="form-group">
                <label for="password">Password</label>
                <input type="password" id="password" />
                <small>Leave blank to keep existing password when editing</small>
            </div>

            <div class="form-group">
                <label for="role">Role</label>
                <select id="role" required>
                    <option value="user">User</option>
                    <option value="admin">Admin</option>
                </select>
            </div>

            <div class="form-actions">
                <button type="submit" class="button primary">Save</button>
                <button type="button" class="button" id="cancelUser">Cancel</button>
            </div>
        </form>
    </div>
</div>

<style>
    .users-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
    }

    .users-grid {
        display: grid;
        gap: 1.5rem;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    }

    .user-card {
        background: white;
        border-radius: 8px;
        padding: 1.5rem;
        display: flex;
        align-items: center;
        gap: 1rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .user-avatar {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        overflow: hidden;
    }

    .avatar-placeholder {
        width: 100%;
        height: 100%;
        background: #f0f0f0;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem;
        color: #666;
    }

    .user-info {
        flex: 1;
    }

    .user-info h3 {
        margin: 0;
        font-size: 1.1rem;
    }

    .user-email {
        margin: 0.25rem 0;
        color: #666;
        font-size: 0.9rem;
    }

    .user-meta {
        display: flex;
        gap: 0.5rem;
        margin-top: 0.5rem;
    }

    .user-role {
        background: #f0f0f0;
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        font-size: 0.8rem;
    }

    .verified-badge {
        background: #e6f4ea;
        color: #1e7e34;
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        font-size: 0.8rem;
    }

    .twofa-badge {
        background: #fff3cd;
        color: #856404;
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        font-size: 0.8rem;
    }

    .user-actions {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .user-actions button {
        padding: 0.5rem;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 0.9rem;
    }

    .edit-user {
        background: #f4f4f4;
        color: #333;
    }

    .delete-user {
        background: #fee;
        color: #c00;
    }

    .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        z-index: 1000;
    }

    .modal-content {
        background: white;
        padding: 2rem;
        border-radius: 8px;
        width: 90%;
        max-width: 500px;
        margin: 10vh auto;
    }

    .form-group {
        margin-bottom: 1rem;
    }

    .form-group label {
        display: block;
        margin-bottom: 0.5rem;
    }

    .form-group input,
    .form-group select {
        width: 100%;
        padding: 0.5rem;
        border: 1px solid #ddd;
        border-radius: 4px;
    }

    .form-group small {
        display: block;
        margin-top: 0.25rem;
        color: #666;
        font-size: 0.8rem;
    }

    .form-actions {
        display: flex;
        gap: 1rem;
        margin-top: 1.5rem;
    }

    .button {
        padding: 0.5rem 1rem;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 1rem;
    }

    .button.primary {
        background: #0066cc;
        color: white;
    }

    .button:not(.primary) {
        background: #f4f4f4;
        color: #333;
    }
</style>

<script>
    const modal = document.getElementById('userModal');
    const form = document.getElementById('userForm');
    const createButton = document.getElementById('createUser');
    const cancelButton = document.getElementById('cancelUser');

    // Show create modal
    createButton.addEventListener('click', () => {
        document.getElementById('modalTitle').textContent = 'Create User';
        document.getElementById('userId').value = '';
        form.reset();
        modal.style.display = 'block';
    });

    // Show edit modal
    document.querySelectorAll('.edit-user').forEach(button => {
        button.addEventListener('click', async () => {
            const userId = button.dataset.userId;
            const response = await fetch(`/api/users/${userId}`);
            const user = await response.json();

            document.getElementById('modalTitle').textContent = 'Edit User';
            document.getElementById('userId').value = user.id;
            document.getElementById('name').value = user.name;
            document.getElementById('email').value = user.email;
            document.getElementById('role').value = user.role;
            document.getElementById('password').value = '';

            modal.style.display = 'block';
        });
    });

    // Handle delete
    document.querySelectorAll('.delete-user').forEach(button => {
        button.addEventListener('click', async () => {
            if (!confirm('Are you sure you want to delete this user?')) return;

            const userId = button.dataset.userId;
            try {
                const response = await fetch(`/api/users/${userId}`, {
                    method: 'DELETE',
                });

                if (!response.ok) throw new Error('Failed to delete user');

                window.location.reload();
            } catch (error) {
                console.error('Delete failed:', error);
                alert('Failed to delete user');
            }
        });
    });

    // Handle form submit
    form.addEventListener('submit', async (e) => {
        e.preventDefault();

        const userId = document.getElementById('userId').value;
        const formData = {
            name: document.getElementById('name').value,
            email: document.getElementById('email').value,
            password: document.getElementById('password').value,
            role: document.getElementById('role').value,
        };

        try {
            const response = await fetch(userId ? `/api/users/${userId}` : '/api/users', {
                method: userId ? 'PUT' : 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(formData),
            });

            if (!response.ok) throw new Error('Failed to save user');

            window.location.reload();
        } catch (error) {
            console.error('Save failed:', error);
            alert('Failed to save user');
        }
    });

    // Close modal
    cancelButton.addEventListener('click', () => {
        modal.style.display = 'none';
    });

    // Close modal on outside click
    window.addEventListener('click', (e) => {
        if (e.target === modal) {
            modal.style.display = 'none';
        }
    });
</script>
