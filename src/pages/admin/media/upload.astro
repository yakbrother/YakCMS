---
import AdminLayout from '../../../layouts/AdminLayout.astro';
---

<AdminLayout title="Upload Media">
	<h1>Upload Media</h1>

	<div class="upload-area">
		<form class="upload-form" method="POST" enctype="multipart/form-data">
			<div class="dropzone" id="dropzone">
				<input type="file" id="fileInput" multiple accept="image/*,video/*,audio/*,.pdf,.doc,.docx" class="file-input" />
				<div class="dropzone-content">
					<div class="upload-icon">üìÅ</div>
					<p>Drag and drop files here or click to browse</p>
					<p class="file-types">Supports images, videos, audio, and documents</p>
				</div>
			</div>

			<div class="upload-list" id="uploadList">
				<!-- Upload previews will be inserted here -->
			</div>

			<div class="button-group">
				<button type="submit" class="button primary">Upload Files</button>
				<a href="/admin/media" class="button">Cancel</a>
			</div>
		</form>
	</div>
</AdminLayout>

<script>
	const dropzone = document.getElementById('dropzone');
	const fileInput = document.getElementById('fileInput');
	const uploadList = document.getElementById('uploadList');

	// Prevent default drag behaviors
	['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
		dropzone.addEventListener(eventName, preventDefaults, false);
		document.body.addEventListener(eventName, preventDefaults, false);
	});

	// Highlight dropzone when dragging over it
	['dragenter', 'dragover'].forEach(eventName => {
		dropzone.addEventListener(eventName, highlight, false);
	});

	['dragleave', 'drop'].forEach(eventName => {
		dropzone.addEventListener(eventName, unhighlight, false);
	});

	// Handle dropped files
	dropzone.addEventListener('drop', handleDrop, false);
	fileInput.addEventListener('change', handleFiles, false);

	function preventDefaults (e) {
		e.preventDefault();
		e.stopPropagation();
	}

	function highlight(e) {
		dropzone.classList.add('highlight');
	}

	function unhighlight(e) {
		dropzone.classList.remove('highlight');
	}

	function handleDrop(e) {
		const dt = e.dataTransfer;
		const files = dt.files;
		handleFiles({target: {files}});
	}

	function handleFiles(e) {
		const files = [...e.target.files];
		files.forEach(previewFile);
	}

	function previewFile(file) {
		const reader = new FileReader();
		reader.readAsDataURL(file);
		reader.onloadend = function() {
			const div = document.createElement('div');
			div.className = 'upload-preview';
			div.innerHTML = `
				<div class="preview-image">
					${file.type.startsWith('image/') 
						? `<img src="${reader.result}" />`
						: `<div class="file-icon">${file.name.split('.').pop()}</div>`
					}
				</div>
				<div class="preview-info">
					<p class="preview-name">${file.name}</p>
					<p class="preview-size">${formatFileSize(file.size)}</p>
				</div>
				<button type="button" class="remove-file">√ó</button>
			`;
			uploadList.appendChild(div);

			div.querySelector('.remove-file').addEventListener('click', () => {
				div.remove();
			});
		}
	}

	function formatFileSize(bytes) {
		if(bytes === 0) return '0 Bytes';
		const k = 1024;
		const sizes = ['Bytes', 'KB', 'MB', 'GB'];
		const i = Math.floor(Math.log(bytes) / Math.log(k));
		return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
	}
</script>

<style>
	.upload-area {
		background: white;
		padding: 2rem;
		border-radius: 8px;
		box-shadow: 0 2px 4px rgba(0,0,0,0.1);
	}

	.dropzone {
		border: 2px dashed #ccc;
		border-radius: 8px;
		padding: 2rem;
		text-align: center;
		position: relative;
		cursor: pointer;
		transition: all 0.3s ease;
	}

	.dropzone.highlight {
		border-color: #0066cc;
		background: #f0f7ff;
	}

	.file-input {
		position: absolute;
		width: 100%;
		height: 100%;
		top: 0;
		left: 0;
		opacity: 0;
		cursor: pointer;
	}

	.upload-icon {
		font-size: 3rem;
		margin-bottom: 1rem;
	}

	.file-types {
		color: #666;
		font-size: 0.9rem;
		margin-top: 0.5rem;
	}

	.upload-list {
		margin-top: 2rem;
		display: grid;
		gap: 1rem;
	}

	.upload-preview {
		display: flex;
		align-items: center;
		padding: 0.5rem;
		background: #f8f9fa;
		border-radius: 4px;
		position: relative;
	}

	.preview-image {
		width: 60px;
		height: 60px;
		margin-right: 1rem;
		background: #eee;
		display: flex;
		align-items: center;
		justify-content: center;
		border-radius: 4px;
		overflow: hidden;
	}

	.preview-image img {
		width: 100%;
		height: 100%;
		object-fit: cover;
	}

	.preview-info {
		flex: 1;
	}

	.preview-name {
		margin: 0;
		font-size: 0.9rem;
	}

	.preview-size {
		margin: 0.25rem 0 0;
		font-size: 0.8rem;
		color: #666;
	}

	.remove-file {
		background: none;
		border: none;
		color: #c00;
		font-size: 1.5rem;
		cursor: pointer;
		padding: 0 0.5rem;
	}

	.button-group {
		margin-top: 2rem;
		display: flex;
		gap: 1rem;
	}

	.button {
		padding: 0.5rem 1rem;
		border-radius: 4px;
		text-decoration: none;
		cursor: pointer;
		border: none;
		font-size: 1rem;
	}

	.button.primary {
		background: #0066cc;
		color: white;
	}

	.button:not(.primary) {
		background: #f4f4f4;
		color: #333;
	}
</style>
