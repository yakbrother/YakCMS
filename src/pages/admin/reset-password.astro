---
const token = Astro.url.searchParams.get('token');
const error = Astro.url.searchParams.get('error');
---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Reset Password - YakCMS Admin</title>
</head>
<body>
    <div class="reset-container">
        <div class="reset-box">
            <h1>Reset Password</h1>
            
            {error && (
                <div class="error-message">
                    {error === 'expired' 
                        ? 'Reset link has expired. Please request a new one.'
                        : 'An error occurred. Please try again.'}
                </div>
            )}

            {!token ? (
                <form id="requestResetForm" class="reset-form">
                    <div class="form-group">
                        <label for="email">Email Address</label>
                        <input 
                            type="email" 
                            id="email" 
                            name="email" 
                            required 
                            autocomplete="email"
                        />
                    </div>

                    <button type="submit" class="reset-button">
                        Send Reset Link
                    </button>

                    <div id="successMessage" class="success-message" style="display: none;">
                        Check your email for the reset link.
                    </div>
                </form>
            ) : (
                <form id="resetPasswordForm" class="reset-form">
                    <input type="hidden" id="token" value={token} />
                    
                    <div class="form-group">
                        <label for="password">New Password</label>
                        <input 
                            type="password" 
                            id="password" 
                            name="password" 
                            required 
                            minlength="8"
                        />
                        <div class="password-requirements">
                            Password must be at least 8 characters
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="confirmPassword">Confirm Password</label>
                        <input 
                            type="password" 
                            id="confirmPassword" 
                            name="confirmPassword" 
                            required
                        />
                    </div>

                    <button type="submit" class="reset-button">
                        Reset Password
                    </button>
                </form>
            )}

            <div class="back-link">
                <a href="/admin/login">Back to Login</a>
            </div>
        </div>
    </div>

    <style>
        body {
            margin: 0;
            padding: 0;
            font-family: system-ui, -apple-system, sans-serif;
            background: #f4f4f4;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .reset-container {
            width: 100%;
            max-width: 400px;
            padding: 1rem;
        }

        .reset-box {
            background: white;
            padding: 2rem;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        h1 {
            text-align: center;
            margin: 0 0 2rem;
            color: #333;
        }

        .reset-form {
            margin-bottom: 1.5rem;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        label {
            display: block;
            margin-bottom: 0.5rem;
            color: #666;
        }

        input {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 1rem;
        }

        input:focus {
            outline: none;
            border-color: #0066cc;
            box-shadow: 0 0 0 2px rgba(0,102,204,0.1);
        }

        .password-requirements {
            margin-top: 0.5rem;
            font-size: 0.9rem;
            color: #666;
        }

        .reset-button {
            width: 100%;
            padding: 0.75rem;
            background: #0066cc;
            color: white;
            border: none;
            border-radius: 4px;
            font-size: 1rem;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .reset-button:hover {
            background: #0052a3;
        }

        .error-message {
            background: #fee;
            color: #c00;
            padding: 0.75rem;
            border-radius: 4px;
            margin-bottom: 1.5rem;
            text-align: center;
        }

        .success-message {
            background: #e6f4ea;
            color: #1e7e34;
            padding: 0.75rem;
            border-radius: 4px;
            margin-top: 1rem;
            text-align: center;
        }

        .back-link {
            text-align: center;
            margin-top: 1rem;
        }

        .back-link a {
            color: #0066cc;
            text-decoration: none;
        }

        .back-link a:hover {
            text-decoration: underline;
        }
    </style>

    <script>
        const requestResetForm = document.getElementById('requestResetForm');
        const resetPasswordForm = document.getElementById('resetPasswordForm');

        if (requestResetForm) {
            requestResetForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                const email = document.getElementById('email').value;

                try {
                    const response = await fetch('/api/auth/reset-password', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email }),
                    });

                    if (!response.ok) throw new Error('Failed to send reset email');

                    document.getElementById('successMessage').style.display = 'block';
                    requestResetForm.reset();
                } catch (error) {
                    console.error('Reset request failed:', error);
                    alert('Failed to send reset email. Please try again.');
                }
            });
        }

        if (resetPasswordForm) {
            resetPasswordForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                const password = document.getElementById('password').value;
                const confirmPassword = document.getElementById('confirmPassword').value;
                const token = document.getElementById('token').value;

                if (password !== confirmPassword) {
                    alert('Passwords do not match');
                    return;
                }

                try {
                    const response = await fetch('/api/auth/reset-password', {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ token, password }),
                    });

                    if (!response.ok) throw new Error('Failed to reset password');

                    window.location.href = '/admin/login?message=password-reset';
                } catch (error) {
                    console.error('Password reset failed:', error);
                    alert('Failed to reset password. Please try again.');
                }
            });
        }
    </script>
</body>
</html>
